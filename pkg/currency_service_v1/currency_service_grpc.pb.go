// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.2
// source: currency_service.proto

package currency_service_v1_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyV1Client is the client API for CurrencyV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyV1Client interface {
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
}

type currencyV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyV1Client(cc grpc.ClientConnInterface) CurrencyV1Client {
	return &currencyV1Client{cc}
}

func (c *currencyV1Client) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, "/currency_service_v1.CurrencyV1/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyV1Server is the server API for CurrencyV1 service.
// All implementations must embed UnimplementedCurrencyV1Server
// for forward compatibility
type CurrencyV1Server interface {
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	mustEmbedUnimplementedCurrencyV1Server()
}

// UnimplementedCurrencyV1Server must be embedded to have forward compatible implementations.
type UnimplementedCurrencyV1Server struct {
}

func (UnimplementedCurrencyV1Server) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCurrencyV1Server) mustEmbedUnimplementedCurrencyV1Server() {}

// UnsafeCurrencyV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyV1Server will
// result in compilation errors.
type UnsafeCurrencyV1Server interface {
	mustEmbedUnimplementedCurrencyV1Server()
}

func RegisterCurrencyV1Server(s grpc.ServiceRegistrar, srv CurrencyV1Server) {
	s.RegisterService(&CurrencyV1_ServiceDesc, srv)
}

func _CurrencyV1_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyV1Server).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currency_service_v1.CurrencyV1/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyV1Server).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyV1_ServiceDesc is the grpc.ServiceDesc for CurrencyV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currency_service_v1.CurrencyV1",
	HandlerType: (*CurrencyV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourse",
			Handler:    _CurrencyV1_GetCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency_service.proto",
}
